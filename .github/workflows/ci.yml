name: 🔍 Academic Website CI/CD
# Dr. Uthayasanker Thayasivam's Research Portfolio - Continuous Integration

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # JSON Validation Job
  validate-json:
    name: 📋 JSON Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔍 Validate JSON files
        run: |
          echo "📋 Validating JSON structure..."
          find ./data -name "*.json" -type f | while read file; do
            echo "Checking $file..."
            python3 -m json.tool "$file" > /dev/null && echo "✅ $file is valid" || { echo "❌ $file is invalid"; exit 1; }
          done

      - name: 🏗️ Validate JSON Schema (Content)
        run: |
          echo "📄 Validating content.json structure..."
          python3 -c "
          import json
          import sys

          with open('data/content.json') as f:
              data = json.load(f)

          required_sections = ['home', 'biography', 'research', 'teaching', 'awards']
          for section in required_sections:
              if section not in data:
                  print(f'❌ Missing required section: {section}')
                  sys.exit(1)
              else:
                  print(f'✅ Section {section} found')

          print('✅ Content structure validation passed!')
          "

      - name: 🎓 Validate Teaching Data
        run: |
          echo "👨‍🏫 Validating teaching.json structure..."
          python3 -c "
          import json
          import sys

          with open('data/teaching.json') as f:
              data = json.load(f)

          if 'teaching' not in data:
              print('❌ Missing teaching root object')
              sys.exit(1)

          teaching = data['teaching']
          required_fields = ['summary', 'featured', 'courses', 'categories']
          for field in required_fields:
              if field not in teaching:
                  print(f'❌ Missing required field: {field}')
                  sys.exit(1)
              else:
                  print(f'✅ Field {field} found')

          print('✅ Teaching structure validation passed!')
          "

      - name: 📊 Validate Projects Data
        run: |
          echo "🔬 Validating projects data..."
          python3 -c "
          import json
          import sys
          import os

          # Validate projects index
          with open('data/projects/projects.json') as f:
              projects_index = json.load(f)

          if 'projects' not in projects_index:
              print('❌ Missing projects array in index')
              sys.exit(1)

          # Validate each project file exists and has required fields
          for project_ref in projects_index['projects']:
              project_id = project_ref['id']
              project_file = f'data/projects/{project_id}/project.json'

              if not os.path.exists(project_file):
                  print(f'❌ Missing project file: {project_file}')
                  sys.exit(1)

              with open(project_file) as f:
                  project_data = json.load(f)

              required_fields = ['id', 'title', 'shortDescription', 'tags', 'status']
              for field in required_fields:
                  if field not in project_data:
                      print(f'❌ Missing field {field} in project {project_id}')
                      sys.exit(1)

              print(f'✅ Project {project_id} validation passed')

          print('✅ Projects structure validation passed!')
          "

  # Code Quality Job
  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    needs: validate-json
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install dependencies
        run: |
          echo "📦 Installing linting and formatting tools..."
          npm install -g prettier@latest htmlhint@latest eslint@latest
          echo "✅ Dependencies installed!"

      - name: 🎨 Check code formatting
        run: |
          echo "🎨 Checking code formatting with Prettier..."

          # Check HTML files
          echo "📄 Checking HTML formatting..."
          find . -name "*.html" -not -path "./node_modules/*" | xargs prettier --check --tab-width 4 --print-width 120

          # Check JavaScript files
          echo "📜 Checking JavaScript formatting..."
          find . -name "*.js" -not -path "./node_modules/*" | xargs prettier --check --tab-width 4 --print-width 120 --single-quote

          # Check JSON files
          echo "📋 Checking JSON formatting..."
          find . -name "*.json" -not -path "./node_modules/*" | xargs prettier --check --tab-width 2

          echo "✅ Code formatting check passed!"

      - name: 🔍 Lint HTML files
        run: |
          echo "📄 Linting HTML files..."
          find . -name "*.html" -not -path "./node_modules/*" -exec htmlhint {} \;
          echo "✅ HTML linting completed!"

      - name: 📜 Lint JavaScript files
        run: |
          echo "📜 Linting JavaScript files..."
          # Create basic ESLint config
          cat > .eslintrc.json << 'EOF'
          {
            "env": {
              "browser": true,
              "es2021": true
            },
            "extends": "eslint:recommended",
            "parserOptions": {
              "ecmaVersion": 12,
              "sourceType": "module"
            },
            "rules": {
              "no-unused-vars": "warn",
              "no-console": "off",
              "semi": ["error", "always"]
            }
          }
          EOF

          find . -name "*.js" -not -path "./node_modules/*" -exec eslint {} \; || echo "⚠️ ESLint warnings found"
          echo "✅ JavaScript linting completed!"

      - name: 🔗 Check for broken links
        run: |
          echo "🔗 Checking for potential broken internal links..."
          python3 -c "
          import os
          import re

          def check_file_exists(href, current_file_dir):
              # Skip external links, mailto, and anchors
              if href.startswith(('http', 'mailto:', '#')):
                  return True

              # Convert relative path to absolute
              if href.startswith('./'):
                  href = href[2:]

              # Check if file exists
              full_path = os.path.join(current_file_dir, href)
              return os.path.exists(full_path)

          broken_links = []
          html_files = []
          for root, dirs, files in os.walk('.'):
              for file in files:
                  if file.endswith('.html'):
                      html_files.append(os.path.join(root, file))

          for html_file in html_files:
              with open(html_file, 'r', encoding='utf-8') as f:
                  content = f.read()

              # Find all href attributes
              hrefs = re.findall(r'href=\"([^\"]+)\"', content)
              current_dir = os.path.dirname(html_file)

              for href in hrefs:
                  if not check_file_exists(href, current_dir):
                      broken_links.append(f'{html_file}: {href}')

          if broken_links:
              print('⚠️ Potential broken links found:')
              for link in broken_links:
                  print(f'  {link}')
          else:
              print('✅ No broken internal links detected!')
          "

  # Security and Performance
  security-performance:
    name: 🔒 Security & Performance
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Security scan for secrets
        run: |
          echo "🔍 Scanning for potential secrets..."
          # Check for common secret patterns
          if grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.json" --include="*.html" . | grep -v "placeholder\|example\|test"; then
            echo "⚠️ Potential secrets found in code!"
            exit 1
          else
            echo "✅ No secrets detected in code!"
          fi

      - name: 📊 File size check
        run: |
          echo "📊 Checking file sizes..."
          find . -name "*.html" -o -name "*.js" -o -name "*.css" | while read file; do
            size=$(wc -c < "$file")
            if [ $size -gt 500000 ]; then  # 500KB limit
              echo "⚠️ Large file detected: $file ($size bytes)"
            fi
          done
          echo "✅ File size check completed!"

      - name: 🖼️ Image optimization check
        run: |
          echo "🖼️ Checking image files..."
          if [ -d "images" ]; then
            find images -name "*.jpg" -o -name "*.png" -o -name "*.gif" | while read img; do
              size=$(wc -c < "$img")
              if [ $size -gt 2000000 ]; then  # 2MB limit
                echo "⚠️ Large image: $img ($size bytes) - consider optimization"
              fi
            done
          fi
          echo "✅ Image check completed!"

  # Deployment Preview (for main branch)
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [validate-json, code-quality, security-performance]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python for server
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🧪 Test local server
        run: |
          echo "🧪 Testing local server startup..."
          timeout 10s python3 -m http.server 8000 &
          sleep 5
          if curl -f http://localhost:8000/ > /dev/null 2>&1; then
            echo "✅ Server started successfully!"
          else
            echo "❌ Server failed to start!"
            exit 1
          fi

      - name: 📋 Generate deployment report
        run: |
          echo "📋 Deployment Report" > deployment-report.md
          echo "===================" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "🏛️ **Dr. Uthayasanker Thayasivam's Academic Website**" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "📊 **Statistics:**" >> deployment-report.md
          echo "- HTML files: $(find . -name '*.html' | wc -l)" >> deployment-report.md
          echo "- JavaScript files: $(find . -name '*.js' | wc -l)" >> deployment-report.md
          echo "- JSON files: $(find . -name '*.json' | wc -l)" >> deployment-report.md
          echo "- Images: $(find images -name '*' 2>/dev/null | wc -l || echo 0)" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "✅ **Status:** All checks passed - Ready for deployment!" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "🌐 **Pages:**" >> deployment-report.md
          find . -maxdepth 1 -name "*.html" -exec basename {} \; | sort | sed 's/^/- /' >> deployment-report.md

          echo "📋 Deployment report generated:"
          cat deployment-report.md

      - name: 📤 Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: academic-website
          path: |
            .
            !.git
            !node_modules
            !.github
          retention-days: 30

  # Notification Job
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [validate-json, code-quality, security-performance, deploy-preview]
    if: always()
    steps:
      - name: 📊 Report Status
        run: |
          echo "📊 CI/CD Pipeline Results:"
          echo "========================="
          echo "📋 JSON Validation: ${{ needs.validate-json.result }}"
          echo "🎨 Code Quality: ${{ needs.code-quality.result }}"
          echo "🔒 Security & Performance: ${{ needs.security-performance.result }}"
          echo "🚀 Deploy Preview: ${{ needs.deploy-preview.result }}"

          if [[ "${{ needs.validate-json.result }}" == "success" && "${{ needs.code-quality.result }}" == "success" && "${{ needs.security-performance.result }}" == "success" ]]; then
            echo ""
            echo "🎉 All checks passed! Academic website is ready for deployment."
            echo "🏛️ Dr. Uthayasanker Thayasivam's Research Portfolio"
            echo "🌐 University of Moratuwa - Computer Science & Engineering"
          else
            echo ""
            echo "❌ Some checks failed. Please review the logs above."
          fi